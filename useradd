#!/usr/bin/ruby
# -*- coding: utf-8 -*-

require 'active_ldap'
require 'optparse'
require 'ostruct'

require 'config/user'
require 'config/group'
require 'config/connect'
############
require 'pp'


##
# Options

options = OpenStruct.new
options.name = false
options.gid = 100 # -g, --gid
options.uid = -1 # -u, --uid
options.groups = [] # -G, --groups
options.home = false # -d, --home
options.shell = "/bin/bash" # -s, --shell
options.first = false # -f, --first
options.last = false # -l, --last

##
# OptionParser Object

opts = OptionParser.new do |opts|
  opts.banner = "Usage: useradd.rb [options] username"

  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-g", "--gid GID",
          "GID Number, defaults to 100") do |gid|
    options.gid = gid
  end

  opts.on("-u", "--uid UID",
          "UID Number, defaults to highest existing uid+1") do |uid|
    options.uid = uid
  end

  opts.on("-G", "--groups GROUP1,GROUP2,...",
          "Add user to GROUP1, GROUP2, ...") do |groups|
    options.groups = groups.split(',')
  end

  opts.on("-d", "--home HOME",
          "Set home folder, defaults to /home/NAME") do |home|
    options.home = home
  end

  opts.on("-s", "--shell SHELL",
          "Set shell of user, defaults to /bin/bash") do |shell|
    options.shell = shell
  end

  opts.on("-f", "--first FIRST",
          "Set first name") do |first|
    options.first = first
  end

  opts.on("-l", "--last SURNAME",
          "Set surname") do |last|
    options.last = last
  end

  opts.separator ""
  opts.separator "Common options:"

  # No argument, shows at tail.  This will print an options summary.
  # Try it and see!
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  # Another typical switch to print the version.
  opts.on_tail("--version", "Show version") do
    puts OptionParser::Version.join('.')
    exit
  end
end


opts.parse!(ARGV)
   
options.name = ARGV[0] || raise( "Username missing." )
#pp options

##############

if User.exists?(options.name)
  $stderr.puts("User #{options.name} already exists.")
  exit 1
end

##
# Uid check
User.find(:all, :attribute => 'uidNumber').collect { |user| user.uidNumber>options.uid ? options.uid=user.uidNumber : false }

options.uid+=1

##
# Create user

#user = User.new(name)
#user.add_class('shadowAccount')
#user.cn = cn
#user.uid_number = uid
#user.gid_number = uid
#user.home_directory = "/home/#{name}"
#user.sn = "somesn"
#unless user.save
#  puts "failed"
#  puts user.errors.full_messages
#  exit 1
#end
